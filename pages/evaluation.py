import pandas as pd
import streamlit as st
from util.agents import create_grader_agent, run_agent, create_solution_agent
from util.textract import load_pdf_text, parse_json
import asyncio

st.set_page_config(
    page_title="Grader BOT",
    initial_sidebar_state="collapsed"
)


TESTING = False
if TESTING:
    st.session_state["current_target"] = load_pdf_text("data/targets/target.pdf")
    st.session_state["current_assignment"] = load_pdf_text("data/assignment.pdf")
    st.session_state["current_golden_solution"] = load_pdf_text("data/solution.pdf")
    st.session_state["current_textbook"] = load_pdf_text("data/textbook.pdf")
    st.session_state["max_points"] = [5, 5, 7]

if "current_assignment" not in st.session_state:
    st.warning("Cannot find assignment questions document to evaluate!")

if "current_target" not in st.session_state:
    st.warning("Cannot find answer document to evaluate!")

if ("current_textbook" not in st.session_state) and ("current_golden_solution" not in st.session_state):
    st.warning("Cannot find goldent answer or textbook!")

st.title("Assignment evaluation")
progress_bar = st.progress(0, text="Loading...")

if "current_golden_solution" in st.session_state and "grades" not in st.session_state:
    progress_bar.progress(75, text="Solutions Analysed. Assigning Grade...")

    input_grader_data = {
        "question": st.session_state["current_assignment"],
        "solution": st.session_state["current_golden_solution"],
        "answer": st.session_state["current_target"],
    }

    agent = create_grader_agent("gpt-4o-mini")
    response = asyncio.run(run_agent(agent, input_grader_data))
    assessment_json = parse_json(response["output"])
    progress_bar.progress(100, text="Grades Assigned. Completed!")

    st.session_state["grades"] = assessment_json["grades"]

    progress_bar.empty()
else:
    progress_bar.progress(25, text="Generating solutions...")
    input_data = {
        "question": st.session_state["current_assignment"],
        "textbook": st.session_state["current_textbook"],
        "max_points": st.session_state["max_points"]
    }

    sol_agent = create_solution_agent("gpt-4o-mini")
    response = asyncio.run(run_agent(sol_agent, input_data))

    st.session_state["current_golden_solution"] = response["output"]
    st.rerun()

if "grades" in st.session_state:

    st.subheader("Generated grades")
    st.text("Below is the scores generated by the Grader BOT. Feel free to edit all the scores.")
    
    i = 0
    for grade_obj in st.session_state["grades"]:
        with st.container():
            st.text("Question: " + grade_obj["question"])
            st.text("Answer: " + grade_obj["answer"])
            st.subheader("Total Score: " + str(grade_obj["total_score"]*st.session_state["max_points"]))
            st.text("Grades: ")

            individual_df = pd.DataFrame(grade_obj["notes"])

            st.markdown(
                """
                <style>
                    [data-testid="stDataFrame"] div.row-widget.stRadio, 
                    [data-testid="stDataFrame"] .st-emotion-cache-1hkyski,
                    .stDataFrameContainer {
                        line-height: 3 !important; /* Adjust the multiplier for row height */
                    }
                    .stDataFrameContainer .row, .stDataFrameContainer .data {
                        min-height: 50px; /* Minimum height for rows */
                    }
                </style>
                """,
                unsafe_allow_html=True
            )
            
            edited_df = st.data_editor(
                individual_df,
                column_config={
                    "score": st.column_config.NumberColumn(
                        label = "Score",
                        width = 20
                    ),
                    "point_solution": st.column_config.TextColumn(
                        label = "Solution",
                        width = 100
                    ),
                    "point_answer": st.column_config.TextColumn(
                        label = "Answer",
                        width = 100
                    )
                },
                hide_index = True,
                use_container_width = True
            )